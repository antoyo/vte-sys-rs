// This file was generated by gir (https://github.com/gtk-rs/gir @ fa5cb13)
// from gir-files (https://github.com/gtk-rs/gir-files @ 480c117)
// DO NOT EDIT

extern crate vte_sys;
extern crate shell_words;
extern crate tempfile;
use std::env;
use std::error::Error;
use std::path::Path;
use std::mem::{align_of, size_of};
use std::process::Command;
use std::str;
use tempfile::Builder;
use vte_sys::*;

static PACKAGES: &[&str] = &["vte-2.91"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Compiler, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Compiler { args })
    }

    pub fn define<'a, V: Into<Option<&'a str>>>(&mut self, var: &str, val: V) {
        let arg = match val.into() {
            None => format!("-D{}", var),
            Some(val) => format!("-D{}={}", var, val),
        };
        self.args.push(arg);
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {:?} failed, {}",
                               &cmd, status).into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{} {}", name, err).into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let mut cmd = Command::new("pkg-config");
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {:?} returned {}",
                           &cmd, out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
    /// Number of tests that failed to compile.
    failed_to_compile: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn record_failed_to_compile(&mut self) {
        self.failed += 1;
        self.failed_to_compile += 1;
    }
    fn summary(&self) -> String {
        format!(
            "{} passed; {} failed (compilation errors: {})",
            self.passed,
            self.failed,
            self.failed_to_compile)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let tmpdir = Builder::new().prefix("abi").tempdir().expect("temporary directory");
    let cc = Compiler::new().expect("configured compiler");

    assert_eq!("1",
               get_c_value(tmpdir.path(), &cc, "1").expect("C constant"),
               "failed to obtain correct constant value for 1");

    let mut results : Results = Default::default();
    for (i, &(name, rust_value)) in RUST_CONSTANTS.iter().enumerate() {
        match get_c_value(tmpdir.path(), &cc, name) {
            Err(e) => {
                results.record_failed_to_compile();
                eprintln!("{}", e);
            },
            Ok(ref c_value) => {
                if rust_value == c_value {
                    results.record_passed();
                } else {
                    results.record_failed();
                    eprintln!("Constant value mismatch for {}\nRust: {:?}\nC:    {:?}",
                              name, rust_value, c_value);
                }
            }
        };
        if (i + 1) % 25 == 0 {
            println!("constants ... {}", results.summary());
        }
    }
    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let tmpdir = Builder::new().prefix("abi").tempdir().expect("temporary directory");
    let cc = Compiler::new().expect("configured compiler");

    assert_eq!(Layout {size: 1, alignment: 1},
               get_c_layout(tmpdir.path(), &cc, "char").expect("C layout"),
               "failed to obtain correct layout for char type");

    let mut results : Results = Default::default();
    for (i, &(name, rust_layout)) in RUST_LAYOUTS.iter().enumerate() {
        match get_c_layout(tmpdir.path(), &cc, name) {
            Err(e) => {
                results.record_failed_to_compile();
                eprintln!("{}", e);
            },
            Ok(c_layout) => {
                if rust_layout == c_layout {
                    results.record_passed();
                } else {
                    results.record_failed();
                    eprintln!("Layout mismatch for {}\nRust: {:?}\nC:    {:?}",
                              name, rust_layout, &c_layout);
                }
            }
        };
        if (i + 1) % 25 == 0 {
            println!("layout    ... {}", results.summary());
        }
    }
    results.expect_total_success();
}

fn get_c_layout(dir: &Path, cc: &Compiler, name: &str) -> Result<Layout, Box<dyn Error>> {
    let exe = dir.join("layout");
    let mut cc = cc.clone();
    cc.define("ABI_TYPE_NAME", name);
    cc.compile(Path::new("tests/layout.c"), &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}",
                           &abi_cmd, &output).into());
    }

    let stdout = str::from_utf8(&output.stdout)?;
    let mut words = stdout.trim().split_whitespace();
    let size = words.next().unwrap().parse().unwrap();
    let alignment = words.next().unwrap().parse().unwrap();
    Ok(Layout {size, alignment})
}

fn get_c_value(dir: &Path, cc: &Compiler, name: &str) -> Result<String, Box<dyn Error>> {
    let exe = dir.join("constant");
    let mut cc = cc.clone();
    cc.define("ABI_CONSTANT_NAME", name);
    cc.compile(Path::new("tests/constant.c"), &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}",
                           &abi_cmd, &output).into());
    }

    let output = str::from_utf8(&output.stdout)?.trim();
    if !output.starts_with("###gir test###") ||
       !output.ends_with("###gir test###") {
        return Err(format!("command {:?} return invalid output, {:?}",
                           &abi_cmd, &output).into());
    }

    Ok(String::from(&output[14..(output.len() - 14)]))
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("VteCursorBlinkMode", Layout {size: size_of::<VteCursorBlinkMode>(), alignment: align_of::<VteCursorBlinkMode>()}),
    ("VteCursorShape", Layout {size: size_of::<VteCursorShape>(), alignment: align_of::<VteCursorShape>()}),
    ("VteEraseBinding", Layout {size: size_of::<VteEraseBinding>(), alignment: align_of::<VteEraseBinding>()}),
    ("VteFormat", Layout {size: size_of::<VteFormat>(), alignment: align_of::<VteFormat>()}),
    ("VtePtyError", Layout {size: size_of::<VtePtyError>(), alignment: align_of::<VtePtyError>()}),
    ("VtePtyFlags", Layout {size: size_of::<VtePtyFlags>(), alignment: align_of::<VtePtyFlags>()}),
    ("VteRegexError", Layout {size: size_of::<VteRegexError>(), alignment: align_of::<VteRegexError>()}),
    ("VteTerminal", Layout {size: size_of::<VteTerminal>(), alignment: align_of::<VteTerminal>()}),
    ("VteTerminalClass", Layout {size: size_of::<VteTerminalClass>(), alignment: align_of::<VteTerminalClass>()}),
    ("VteTextBlinkMode", Layout {size: size_of::<VteTextBlinkMode>(), alignment: align_of::<VteTextBlinkMode>()}),
    ("VteWriteFlags", Layout {size: size_of::<VteWriteFlags>(), alignment: align_of::<VteWriteFlags>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) VTE_CURSOR_BLINK_OFF", "2"),
    ("(gint) VTE_CURSOR_BLINK_ON", "1"),
    ("(gint) VTE_CURSOR_BLINK_SYSTEM", "0"),
    ("(gint) VTE_CURSOR_SHAPE_BLOCK", "0"),
    ("(gint) VTE_CURSOR_SHAPE_IBEAM", "1"),
    ("(gint) VTE_CURSOR_SHAPE_UNDERLINE", "2"),
    ("(gint) VTE_ERASE_ASCII_BACKSPACE", "1"),
    ("(gint) VTE_ERASE_ASCII_DELETE", "2"),
    ("(gint) VTE_ERASE_AUTO", "0"),
    ("(gint) VTE_ERASE_DELETE_SEQUENCE", "3"),
    ("(gint) VTE_ERASE_TTY", "4"),
    ("(gint) VTE_FORMAT_HTML", "2"),
    ("(gint) VTE_FORMAT_TEXT", "1"),
    ("VTE_MAJOR_VERSION", "0"),
    ("VTE_MICRO_VERSION", "2"),
    ("VTE_MINOR_VERSION", "58"),
    ("(guint) VTE_PTY_DEFAULT", "0"),
    ("(gint) VTE_PTY_ERROR_PTY98_FAILED", "1"),
    ("(gint) VTE_PTY_ERROR_PTY_HELPER_FAILED", "0"),
    ("(guint) VTE_PTY_NO_CTTY", "64"),
    ("(guint) VTE_PTY_NO_FALLBACK", "16"),
    ("(guint) VTE_PTY_NO_HELPER", "8"),
    ("(guint) VTE_PTY_NO_LASTLOG", "1"),
    ("(guint) VTE_PTY_NO_SESSION", "32"),
    ("(guint) VTE_PTY_NO_UTMP", "2"),
    ("(guint) VTE_PTY_NO_WTMP", "4"),
    ("(gint) VTE_REGEX_ERROR_INCOMPATIBLE", "2147483646"),
    ("(gint) VTE_REGEX_ERROR_NOT_SUPPORTED", "2147483647"),
    ("VTE_REGEX_FLAGS_DEFAULT", "1075314688"),
    ("VTE_SPAWN_NO_PARENT_ENVV", "33554432"),
    ("VTE_TEST_FLAGS_ALL", "18446744073709551615"),
    ("VTE_TEST_FLAGS_NONE", "0"),
    ("(gint) VTE_TEXT_BLINK_ALWAYS", "3"),
    ("(gint) VTE_TEXT_BLINK_FOCUSED", "1"),
    ("(gint) VTE_TEXT_BLINK_NEVER", "0"),
    ("(gint) VTE_TEXT_BLINK_UNFOCUSED", "2"),
    ("(gint) VTE_WRITE_DEFAULT", "0"),
];


